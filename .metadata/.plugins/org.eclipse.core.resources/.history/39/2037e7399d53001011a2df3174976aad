options{  JDK_VERSION = "1.5";}PARSER_BEGIN(StefanMak)import yapl.interfaces.*;import yapl.lib.*;/** Simple brace matcher. */public class StefanMak{  /** Main entry point. */  public static void main(String args []) throws ParseException, TokenMgrError  {    StefanMak parser = new StefanMak(System.in);    System.out.println("Start Eingabe");	try	    {	      parser.Start();	      	    }	    catch (TokenMgrError ex)	    {	      //CompilerMessage.printError(ex,"test");	    }	    catch (ParseException ex)	    {	      //CompilerMessage.printError(ex,"test");	    }		    	  }}PARSER_END(StefanMak)SKIP :{  " "| "\r"| "\t"| "\n"}/* for comments - not necessary nested */SPECIAL_TOKEN : {    < COMMENT : "/*" ( ~[ "*" ] | "*" ~[ "/" ] )* "*/" >}TOKEN : /* Elementary Words to provide warnings*/{  < LPAR : "(" >| < RPAR : ")" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < COMMA : "," >| < SEMICOLON : ";" >| < IS : "=" >| < COLON : ":" >| < CALLSIGN : "!" >| < QUESTIONMARK : "?" >| < IF : "If" >| < ENDIF : "EndIf" >| < THEN : "Then" >| < ELSE : "Else" >| < OR : "Or" >| < VOID : "void" >| < AND : "And" >| < TRUE : "True" >| < FALSE : "False" >| < WHILE : "While" >| < ENDWHILE : "EndWhile" >| < DO : "Do" >| < RETURN : "Return" >| < WRITE : "Write" >| < BEGIN : "Begin" >| < END : "End" >| < PROCEDURE : "Procedure" >| < PROGRAM : "Program" >| < INTEGER : "Integer" >| < BOOLEAN : "Boolean" >| < CONST : "Const" >| < DECLARE : "Declare" >| < READONLY : "Readonly" >| < NEW : "new" >| < BLANK : "#" >| < WRITEINT : "writeint" >| < WRITEBOOL : "writebool" >| < WRITELN : "writeln" >| < READINT : "readint" >}TOKEN : /* Basic Elements*/{  < LETTER : [ "a"-"z", "A"-"Z", "_" ] >| < DIGIT : [ "0"-"9" ] >| < OTHERCHAR : [ "+", "-", "*", "/", ".", ",", ";", ":", "!", "?", "=", "#", "%", "<", ">", "$", "(", ")", "[", "]", "{", "}", "@", "&", "^", "|", "\\" ] >| < IDENT :    < LETTER > ( < LETTER > | < DIGIT > )* >| < NUMBER : < DIGIT > (< DIGIT >)* >| < STRING :    "\"" ( " " | < LETTER > | < DIGIT > | < OTHERCHAR > )* "\"" >}TOKEN : /* Operations */{  < RELOP : "<" | "<=" | ">=" | ">" >| < EQUALOP : "==" | "!=" >| < ADDOP : "+" | "-" >| < MULOP : "*" | "/" | "%" >}/* Expressions */void LITERAL():{}{	< TRUE > | < FALSE > | < NUMBER > }void SELECTOR() :{}{  < LBRACKET > EXPR() < RBRACKET > [ SELECTOR() ]}void ARRAYLEN() :{}{  < BLANK > < IDENT > [ SELECTOR() ]}void PRIMARYEXPR() :{}{  LITERAL()| < LPAR > EXPR() < RPAR >| LOOKAHEAD(2)  PROCEDURECALL()| < IDENT > [ SELECTOR() ]| ARRAYLEN()}void UNARYEXPR() :{}{  [ < ADDOP > ] PRIMARYEXPR()}void MULEXPR() :{}{  UNARYEXPR()  (    < MULOP > UNARYEXPR()  )*}void ADDEXPR() :{}{  MULEXPR()  (    < ADDOP > MULEXPR()  )*}void RELEXPR() :{}{  ADDEXPR() [ < RELOP > ADDEXPR() ]}void EQUALEXPR() :{}{  RELEXPR() [ < EQUALOP > RELEXPR() ]}void CONDANDEXPR() :{}{  EQUALEXPR()  (    < AND > EQUALEXPR()  )*}void CREATIONEXPR() :{}{  < NEW > PRIMTYPE() "[" EXPR() "]"  (    < LBRACKET > EXPR() < RBRACKET >  )*}void EXPR() :{}{  CONDANDEXPR()  (    < OR > CONDANDEXPR()  )*| CREATIONEXPR()}void ARGUMENTLIST() :{}{  EXPR() ( < COMMA > EXPR() )*}void PROCEDURECALL() :{}{ 	< IDENT > <LPAR > [ ARGUMENTLIST() ] < RPAR >}void ASSIGNMENT() :{}{  < IDENT > [ SELECTOR() ] ":=" EXPR()    }void IFSTATEMENT() :{}{  < IF > EXPR() < THEN > STATEMENTLIST() [ < ELSE > STATEMENTLIST() ] < ENDIF >}void WHILESTATEMENT() :{}{  < WHILE > EXPR() < DO > STATEMENTLIST() < ENDWHILE >}void RETURNSTATEMENT() :{}{  < RETURN > EXPR()}void WRITESTATEMENT() :{}{  < WRITE > < STRING >}void STATEMENT() :{}{  IFSTATEMENT()| WHILESTATEMENT()| RETURNSTATEMENT()| WRITESTATEMENT()| LOOKAHEAD(2) ASSIGNMENT()| PROCEDURECALL()| BLOCK()}void STATEMENTLIST() :{}{  (    STATEMENT() < SEMICOLON >  )*}void BLOCK() :{}{  [ DECL() ] < BEGIN > STATEMENTLIST() < END >}void PRIMTYPE() :{}{  < INTEGER >| < BOOLEAN >}void TYPE() :{}{  PRIMTYPE() ( < LBRACKET > < RBRACKET >)*}void RETURNTYPE() :{}{  < VOID > | TYPE()}void CONSTDECL() :{}{  < CONST > < IDENT > < IS > LITERAL() < SEMICOLON >}void VARDECL() :{}{  < IDENT > ("," < IDENT >)* ":" TYPE() ";"}void DECL() :{}{  "Declare"  (    CONSTDECL()  | VARDECL()  )*}void FORMALPARAM() :{}{  [ < READONLY > ] TYPE() < IDENT >}void FORMALPARAMLIST() :{}{  FORMALPARAM()  (    < COMMA > FORMALPARAM()  )*}void PROCEDURE() :{}{  "Procedure" RETURNTYPE() < IDENT > "(" [ FORMALPARAMLIST() ] ")" BLOCK() < IDENT > ";"}void PROGRAM() :{}{  "Program" < IDENT >  (    DECL()  | PROCEDURE()  )*  "Begin" STATEMENTLIST() "End" < IDENT > "."}/** Root production. */void Start() :{  Token t;}{  {    do    {      t = getNextToken();      System.out.println(t.toString());    }    while (t.kind != EOF);  }  < EOF >}