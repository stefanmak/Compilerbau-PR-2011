/* Generated By:JavaCC: Do not edit this line. StefanMak.java */
import yapl.interfaces.*;
import yapl.lib.*;
import yapl.impl.*;
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.io.*;
import java.util.HashMap;

/** Compiler (Scanner, Parser, TypeChecker and CodeGenerator) */
public class StefanMak implements StefanMakConstants {
  /** Program Name - for failure and debugging*/
  private static String program_name;

  /** Symbol Table - for storing used Symbols (Variables, ProcNames, ...) */
  private static SymboltableImpl symTable;

  /** Declaration of the four predefined YAPL procedures as symbols */
  private static Symbol pre_writeln;
  private static Symbol pre_writeint;
  private static Symbol pre_writebool;
  private static Symbol pre_readint;

  /** Argument List - stores the types of arguments of the actual procedure (in order) **/
  private static LinkedList<Type > argumentList;

  /** Declaration for the CodeGenerator **/
  private static CodeGenerator cg = null;

  /** HashMap which contains all variables - for CodeGeneration **/
  private static HashMap<String,Attrib > variablesMap = new HashMap<String,Attrib >();

  /** Variable for  */

  /** is set if a procedure needs a return*/
  private static boolean need_return;
  /** is set if one path of a procedure gives a return*/
  private static boolean set_return;
  /** is set to a specific type for a procedure return */
  private static Type returnType;
  /** actual Procedure Symbol */
  private static Symbol currentProcedureSymbol;

  /** Main entry point */
  public static void main(String args []) throws TokenMgrError, YAPLException, ParseException
  {

    /** Declare variables for reading the source program */
    File file = null;
    FileInputStream fis = null;

    /** Declare variables for writing the destination program */
        File outputFile = null;
        FileOutputStream fout = null;
        PrintStream prout = null;

    /** Create new Symbol Table */
    symTable = new SymboltableImpl();

    /** Read YAPL Program from file */
    if (args.length == 2)
    {
      try
      {

        /** Read the input file */
        file = new File(args [0]);
        fis = new FileInputStream(file);

                /** Open the output file */
        outputFile = new File(args [1]);

        /** If it not exists - > create it */
        if(!outputFile.exists())
                outputFile.createNewFile();
        fout = new FileOutputStream(outputFile);
        prout = new PrintStream(fout);

                /** Initialize the CodeGenerator with the output stream */
        cg = new CodeGenerator(prout);
      }
      catch (IOException ex)
      {
        System.err.println(ex);
      }
    }
    else
    {
      System.out.println("YAPL Program as first parameter needed and destination file as second");
      System.out.println("System exit...");
      System.exit(0);
    }

    /** Give my Scanner/Parser/Generator the InputStream to start the work */
    StefanMak parser = new StefanMak(fis);

    try
    {
      /** Starts the analysing process */
      parser.Start();

      /** If method above terminates - > everything was correct */
      CompilerMessage.printOK(StefanMak.program_name);

      /** Close the Printstream */
      prout.close();
    }
    catch (TokenMgrError ex)
    {
      /** Lexical Error etc. occured */
      CompilerMessage.printError(ex, StefanMak.program_name);
    }
    catch (ParseException ex)
    {
      /** Parse Error occured */
      CompilerMessage.printError(ex, StefanMak.program_name);
    }
    catch (YAPLException ex)
    {
      /** SymbolTable Error occured */
      CompilerMessage.printError(ex, StefanMak.program_name);
    }
  }

/** Expressions */
  static final public Token LITERAL() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
    {if (true) return t;}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
    {if (true) return t;}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
    {if (true) return t;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Selctor for an Array Element  arr[3][x][x-7] */
  static final public int SELECTOR() throws ParseException {
        Type type;
        Token t;
        int dim = 0;
    jj_consume_token(LBRACKET);
    type = EXPR();
    t = jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      dim = SELECTOR();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    // if type of the Expression in the selection is not Integer - > Throw error
    if(type.getType() != Type.INT || (type instanceof ArrayType))
    {
      {if (true) throw new YAPLException(CompilerError.BadArraySelector, null, t);}
    }
    // Maybe more than one dimension, so increment dim to return the overall dimension
    dim++;
    {if (true) return dim;}
    throw new Error("Missing return statement in function");
  }

/** Length of an Array #arr or #arr[] (on multidimensional) */
  static final public void ARRAYLEN() throws ParseException {
  Token t;
  Token t_sec;
  int dim = 0;
    t_sec = jj_consume_token(BLANK);
    t = jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      dim = SELECTOR();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    // Array has to be declared before you can get its length
    Symbol ident = symTable.lookup(t.image);

    // If Array declared but is not a variable or parameter - > Error
    if (ident != null && (ident.getKind() != Symbol.Variable && ident.getKind() != Symbol.Parameter))
    {
      {if (true) throw new YAPLException(CompilerError.SymbolIllegalUse, ident, t);}
    }
    // If Array not declared before - > Error
    else if (ident == null)
    {
      {if (true) throw new YAPLException(CompilerError.IdentNotDecl, ident, t);}
    }
    // If identifier is not an Array or identifier is array but element access (dimArr == accessDim) - > Error
    else if((! (ident.getType() instanceof ArrayType)) || ((ArrayType)ident.getType()).getDimension() == dim)
    {
       {if (true) throw new YAPLException(CompilerError.ArrayLenNotArray,ident, t_sec);}
    }
  }

/** Primary Expressions ( True, False, x+2, x[], write('bla') */
  static final public Type PRIMARYEXPR() throws ParseException {
  Token t = null;
  Type type = null;
  Boolean select = false;
  int dim = 0;
  Symbol symbol;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NUMBER:
      // True, False, Number
        t = LITERAL();
        if(t.image.equals("True") || t.image.equals("False"))
        {
          // Type(readonly,type,token)
          type = new Type(false,Type.BOOL,t);
        }else
        {
          // Type(readonly,type,token)
          type = new Type(false,Type.INT,t);
        }
        // Set the token of the actual type
        type.setToken(t);
    {if (true) return type;}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      type = EXPR();
      jj_consume_token(RPAR);
  {if (true) return type;}
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2)) {
        type = PROCEDURECALL();
    // procedure doesn't have a return value - > not a function
    if(type.getType() == Type.OTHER)
    {
      {if (true) throw new YAPLException(CompilerError.ProcNotFuncExpr,
                        new SymbolImpl(Symbol.Procedure,type.getToken().toString()),
                        type.getToken());}
    }
    {if (true) return type;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            dim = SELECTOR();
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
    // Element has already been declared
    Symbol ident = symTable.lookup(t.image);

    // Element isn't a Variable, Const or Parameter - > Error
    if (ident != null && (ident.getKind() == Symbol.Procedure || ident.getKind() == Symbol.Program))
    {
      // wrong type
      {if (true) throw new YAPLException(CompilerError.SymbolIllegalUse, ident, t);}
    }
    // Element is currently not declared - > Error
    else if (ident == null)
    {
      // variable not declared
      {if (true) throw new YAPLException(CompilerError.IdentNotDecl, ident, t);}
    }
    // Element used as an Array but is not an ArrayType or Element is ArrayType but selected Dimension is too deep 
    else if(dim >= 1 && ((!(ident.getType() instanceof ArrayType)) || (((ArrayType)ident.getType()).getDimension() - dim) < 0))
    {
       {if (true) throw new YAPLException(CompilerError.SelectorNotArray,ident, t);}
    }
        // Element is an Array and access dimension is same as Array Dimension - > Type = 'normal' Type
    else if(dim >= 1 && ((ArrayType) ident.getType()).getDimension() == dim)
        {
           {if (true) return new Type(ident.getType().isReadOnly(), ident.getType().getType(), t);}
    }
    else
    {
       // Element is an Array and return is a SubArray 		
           if(ident.getType() instanceof ArrayType )
           {
              {if (true) return new ArrayType(ident.getType().isReadOnly(), ident.getType().getType(), t,((ArrayType)ident.getType()).getDimension()-dim);}
           }
           // Element is a 'normal' Type 
           else
           {
             // Type(readonly,type,token) 	      
              {if (true) return new Type(ident.getType().isReadOnly(), ident.getType().getType(), t);}
           }
    }
          break;
        case BLANK:
          ARRAYLEN();
  // Type(readonly,type,token)
  {if (true) return new Type(false,Type.INT,t);}
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/** UnaryExpr = [AddOp] PrimaryExpr - >  +/-  True, x , y[2], #x, calc(x) */
  static final public Type UNARYEXPR() throws ParseException {
        Type returnType;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDOP:
      t = jj_consume_token(ADDOP);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    returnType = PRIMARYEXPR();
    // if +/- in front and returnType is Bool or Arraytype - > Error
    if(t != null && (returnType.getType() == Type.BOOL || returnType instanceof ArrayType))
    {
        {if (true) throw new YAPLException(CompilerError.IllegalOp1Type,null, t);}
    }
    else
    {
        // if +/- is not null - > set it to type
        if(t!=null){
                returnType.setToken(t);
        }
        {if (true) return returnType;}
    }
    throw new Error("Missing return statement in function");
  }

/** MulExpr = UnaryExpr { MulOp UnaryExpr } - > y[2] * x * 2 , x * 3 */
  static final public Type MULEXPR() throws ParseException {
        // More than one type variable is needed to check 'recursive' the type compatibility        Type type;
        Type returnType;
        Token t;
    // Set the first return type 
      returnType = UNARYEXPR();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULOP:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(MULOP);
      type = UNARYEXPR();
     // next expression must not be a Bool and equivalent to the first type - > Error 
     if((returnType.getType() != Type.BOOL && returnType.getType() != type.getType()))
     {
       {if (true) throw new YAPLException(CompilerError.IllegalOp2Type,null, t);}
     }
         // if one of the two (or both) types are Arrays - > Error
     else if( type instanceof ArrayType || returnType instanceof ArrayType)
     {
       {if (true) throw new YAPLException(CompilerError.IllegalOp2Type,null, t);}
     }
         // both are of same type and mulOp can be applied
     else
     {
       returnType.setToken(t);
     }
    }
    {if (true) return returnType;}
    throw new Error("Missing return statement in function");
  }

/** AddExpr = MulExpr { AddOp MulExpr } (Defines also the 'binding') - > x*y + a[2] */
  static final public Type ADDEXPR() throws ParseException {
    // More than one type variable is needed to check 'recursive' the type compatibility        Type type;
        Type returnType;
        Token t;
    // Set the first return type
      returnType = MULEXPR();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDOP:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(ADDOP);
      type = MULEXPR();
     // next expression must not be a Bool and equivalent to the first type - > Error
     if((returnType.getType() != Type.BOOL && returnType.getType() != type.getType()))
     {
       {if (true) throw new YAPLException(CompilerError.IllegalOp2Type,null, t);}
     }
         // if one of the two (or both) types are Arrays - > Error
     else if( type instanceof ArrayType || returnType instanceof ArrayType)
     {
       {if (true) throw new YAPLException(CompilerError.IllegalOp2Type,null, t);}
     }
        // both are of same type and AddOp can be applied
     else
     {
       returnType.setToken(t);
     }
    }
    {if (true) return returnType;}
    throw new Error("Missing return statement in function");
  }

/** RelExpr = AddExpr [ RelOp AddExpr ] - > x*2+y/2 > z */
  static final public Type RELEXPR() throws ParseException {
    // Two type variables needed for evaluation of the Relational Operation        Type type;
        Type returnType;
        Token t;
    returnType = ADDEXPR();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELOP:
      t = jj_consume_token(RELOP);
      type = ADDEXPR();
          // Relational Operation only on numbers - > Bool and Arrays - > Error
          if(returnType.getType() == Type.BOOL || type.getType() == Type.BOOL
                || type instanceof ArrayType || returnType instanceof ArrayType)
          {
                  {if (true) throw new YAPLException(CompilerError.IllegalRelOpType,null, t);}
          }
          // Relational Operator was on numbers - > Result is a bool
          else
          {
              // Type(readonly,type,token)
                  returnType = new Type(false, Type.BOOL, type.getToken());
          }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    {if (true) return returnType;}
    throw new Error("Missing return statement in function");
  }

/** RelExpr [ EqualOp RelExpr ] - > 3 < x == 7 > 4*x */
  static final public Type EQUALEXPR() throws ParseException {
    // Two Types needed for evaluation of the Expression        Token t;
        Type type;
        Type returnType;
    // Set the types
      returnType = RELEXPR();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALOP:
      t = jj_consume_token(EQUALOP);
      type = RELEXPR();
          // both types are not equal or one of both types is an array - > Array
          if(returnType.getType() != type.getType() || (type instanceof ArrayType && !(returnType instanceof ArrayType)))
          {
            {if (true) throw new YAPLException(CompilerError.IllegalEqualOpType,null,t);}
          }
          // Types are INT or BOOL - > Expression can be evaulated - > Result is BOOL
          returnType = new Type(false,Type.BOOL,type.getToken());
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return returnType;}
    throw new Error("Missing return statement in function");
  }

/** EqualExpr { 'And' EqualExpr } - > y == z And x = FALSE */
  static final public Type CONDANDEXPR() throws ParseException {
    // Two Types needed for evaluation of the Expression 'recursive'        Type type;
        Type returnType;
        Token t;
    // set return type of first Equalexpression
      returnType = EQUALEXPR();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      // set return type of next Equalexpression
          t = jj_consume_token(AND);
      type = EQUALEXPR();
        // if one of the types isn't BOOL or an array of BOOLs - > Error
                if(returnType.getType() != Type.BOOL
                        || type.getType() != Type.BOOL
                        || type instanceof ArrayType
                        || returnType instanceof ArrayType)
                        {
                          {if (true) throw new YAPLException(CompilerError.IllegalOp2Type,null,t);}
                        }
                // Type(readonly,type,token)
                returnType = new Type(false,Type.BOOL,type.getToken());
    }
    {if (true) return returnType;}
    throw new Error("Missing return statement in function");
  }

/**  "new" PrimType "[" Expr "]" { "[" Expr "]" } - > Creation of Arrays or Multidimensional Arrays */
  static final public Type CREATIONEXPR() throws ParseException {
    // Two Tokens for exact Errors        Token t;
        Token t_sec;
        Type type;
        //LinkedList<Type> types = new LinkedList<Type>();        int dim = 1;
    jj_consume_token(NEW);
    t = PRIMTYPE();
    jj_consume_token(LBRACKET);
    type = EXPR();
    t_sec = jj_consume_token(RBRACKET);
    // if Array Selector is a RelOperation etc. an type == BOOL - > Error
    if(type.getType() == Type.BOOL)
    {
      // Type(readonly,type,token)
      {if (true) throw new YAPLException(CompilerError.BadArraySelector,null,t_sec);}
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(LBRACKET);
      type = EXPR();
      t_sec = jj_consume_token(RBRACKET);
      if(type.getType() == Type.BOOL)
      {
        // Type(readonly,type,token)
        {if (true) throw new YAPLException(CompilerError.BadArraySelector,null,t_sec);}
      }
      // increment Dimension for every time an [] occurs
      dim++;
    }
    // Type(readonly,type,token,dimension of the Array)
    {if (true) return new ArrayType(false,Type.getTypeOfImage(t.image),t,dim);}
    throw new Error("Missing return statement in function");
  }

/** CondAndExpr { 'Or' CondAndExpr } | CreationExpr - > Every kind of 'normal' expression (incl. logical And & Or)*/
  static final public Type EXPR() throws ParseException {
    // Two Types needed for 'recursive' evaluation of types on CondAndExpr        Token t;
        Type type;
        Type returnType;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case TRUE:
    case FALSE:
    case BLANK:
    case ADDOP:
    case NUMBER:
    case IDENT:
      // Set return Type of first expression
        returnType = CONDANDEXPR();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        // Set return Type of next expression
            t = jj_consume_token(OR);
        type = CONDANDEXPR();
      // For logical 'OR' every type must be BOOL instead - > ERROR
      if(type.getType() != Type.BOOL || returnType.getType() != Type.BOOL)
      {
        {if (true) throw new YAPLException(CompilerError.IllegalOp2Type,null,t);}
      }
          // Both Expressions evaluate to TRUE or FALSE - > BOOL as returnType [Log. AND / OR, <, >]
      else
      {
        returnType = new Type(false,Type.BOOL,type.getToken());
      }
      }
    {if (true) return returnType;}
      break;
    case NEW:
      returnType = CREATIONEXPR();
  {if (true) return returnType;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Argumentlist of a Procedure - > Foo(x,2,True)...*	Takes a Symbol as Parameter to get all Parameters of the Procedure and their order.*	Returns number of arguments.*/
  static final public int ARGUMENTLIST(Symbol procedureName) throws ParseException {
        // Variable Declaration - > if Argumentlist is processed - > minimum one argument must have been occured        int arguments = 1;
        int counter = 1;
        // Get first argument via procedureName        Symbol start = procedureName.getNextSymbol();
        // Saves all Types of the arguments in order        argumentList = new LinkedList<Type >();
        // Saves temporary all Types of the arguments in order        LinkedList<Type > tempList = new LinkedList<Type >();
        Type type;
    // add first argument to the lists
      type = EXPR();
    argumentList.add(type);
    tempList.add(type);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      type = EXPR();
      argumentList.add(type);
      tempList.add(type);
      arguments++;
    }
    // Little checking ;-) - > do it for all entries in the argument List   
    while(start != null && !argumentList.isEmpty())
    {
      // If the predefined procedure 'writebool' is called - > don't throw Errors - >
      // cause predefined type for argument is BOOL - > but could also be a CONST
      if(procedureName.getName().equals("writebool") && argumentList.getFirst().getType() == 2)
      {
      }
      // If actual Type of the Argument List is not the same type as it is defined
      // (--,--,start (bool),--)  < - > (--,--,(int),--)    <-- for third argument
          else if(start.getType().getType() != argumentList.getFirst().getType())
      {
        argumentList.getFirst().getToken().setImage("" + counter);
        {if (true) throw new YAPLException(CompilerError.ArgNotApplicable,procedureName,argumentList.getFirst().getToken());}
      }
          // If actual element is of Type Array but doesn't have the same dimension
      else if(start.getType() instanceof ArrayType
                && argumentList.getFirst() instanceof ArrayType
                        && (((ArrayType)argumentList.getFirst()).getDimension()
                                !=((ArrayType)start.getType()).getDimension())
                )
      {
        argumentList.getFirst().getToken().setImage("" + counter);
        {if (true) throw new YAPLException(CompilerError.ArgNotApplicable,procedureName,argumentList.getFirst().getToken());}
      }
          // If actual element	is of Type Array but is set to ReadOnly but Procedure is Read/Write
      else if((start.getType() instanceof ArrayType)
                                && ((ArrayType)argumentList.getFirst()).isReadOnly()
                                && !start.getType().isReadOnly()
                        )
      {
        argumentList.getFirst().getToken().setImage("" + counter);
        {if (true) throw new YAPLException(CompilerError.ReadonlyArg,procedureName,argumentList.getFirst().getToken());}
      }
      // Increment counter of arguments and set next symbol of procedure as start symbol and remove first element
      // of argumentList (passed).
      counter++;
      start = start.getNextSymbol();
      argumentList.removeFirst();
    }
        // If we have arguments left - > ERROR too much arguments      
    if(argumentList.size() > 0)
    {
      argumentList.getFirst().getToken().setImage("" + counter);
      {if (true) throw new YAPLException(CompilerError.ArgNotApplicable,procedureName,argumentList.getFirst().getToken());}
    }
        // Restore the whole argument list and return it
    argumentList = tempList;
    {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

/** ident "(" [ ArgumentList ] ")" - > calc(x,y,True) ... */
  static final public Type PROCEDURECALL() throws ParseException {
  Token t;
  Token t_sec;
  Type type;
  int arguments = 0;
    t = jj_consume_token(IDENT);
    // Procedure has to be defined before usage
    Symbol ident = symTable.lookup(t.image);
    // Element is declared but isn't a procedure
    if (ident != null && (ident.getKind() != Symbol.Procedure))
    {
      {if (true) throw new YAPLException(CompilerError.SymbolIllegalUse, ident, t);}
    }
    // Element isn't declared
    else if (ident == null)
    {
      {if (true) throw new YAPLException(CompilerError.IdentNotDecl, ident, t);}
    }
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case TRUE:
    case FALSE:
    case NEW:
    case BLANK:
    case ADDOP:
    case NUMBER:
    case IDENT:
      arguments = ARGUMENTLIST(ident);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    t_sec = jj_consume_token(RPAR);
        // Count arguments of the defined procedure
        Symbol start = ident.getNextSymbol();
        int counter = 0;
                while(start != null)
                {
                  start = start.getNextSymbol();
                  counter++;
                }

                // Defined Procedure has more arguments than argumentlist - > ERROR
                if(counter > arguments)
                {
                  {if (true) throw new YAPLException(CompilerError.TooFewArgs,ident,t_sec);}
                }
        // If ident is not declared - > Type is Error Type [OTHER] <- Redundant because Exception thrown above
        if(ident.getType() == null)
        {
                type = new Type(false, Type.OTHER, t);
        }
        // Return Type is an Array Type
        else if(ident.getType() instanceof ArrayType)
        {
                type = new ArrayType(false,ident.getType().getType(), t, ((ArrayType)ident.getType()).getDimension());
        }
        // Return Type is INT or BOOL
        else
        {
                type = new Type(false, ident.getType().getType(), t);
        }

                /** CodeGen for procedurecall **/
        cg.callProcedure(symTable.lookup(t.image),argumentList,variablesMap);

                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/** ident [ Selector ] ":=" Expr  - > x := 3,... */
  static final public void ASSIGNMENT() throws ParseException {
  Token t;
  Token t_sec;
  Type type;
  boolean selectorUsed = false;
    t = jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      SELECTOR();
                             selectorUsed = true;
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    t_sec = jj_consume_token(50);
    type = EXPR();
    // Assigned symbol has already been declared
    Symbol assi = symTable.lookup(t.image);
    int kind;
    if(assi != null)
    {
       kind = assi.getKind();
    }
    // Symbol/Variable has not been declared - > Error
    else
    {
       {if (true) throw new YAPLException(CompilerError.IdentNotDecl, assi, t);}
    }

        // If Variable is a constant or procedure or program - > Error
    if (kind == Symbol.Constant || (kind != Symbol.Variable && kind != Symbol.Parameter))
    {
      {if (true) throw new YAPLException(CompilerError.SymbolIllegalUse, assi, t);}
    }

    // If Parameter in Procedure is set to readonly, it can't be assigned - > Error			
    if(assi.getType().isReadOnly())
    {
      {if (true) throw new YAPLException(CompilerError.ReadonlyAssign, assi, t);}
    }
        // Example x := y
        // First Block
        //		x is not an Array
        //		y is not an Array
        //		x and y have the same type
        // Second Block
        //		x is an Array
        //		y is an Array
        //		x and y have the same dimension
        // Third Block
        //		x is an Array - > used with selection x[3]
        //		y is not an Array
        //		x and y have the same basic type
        // If none of this blocks True - > ERROR
    else if(
                 !(
                   (
                          !(assi.getType() instanceof ArrayType)
                          && !(type instanceof ArrayType)
                          && assi.getType().getType()==type.getType()
                        )
                    ||
                     (
                      (assi.getType() instanceof ArrayType)
                          && (type instanceof ArrayType)
                          && (((ArrayType)assi.getType()).getDimension() == ((ArrayType)type).getDimension())
                        )
                        ||
                         (
                           selectorUsed
                           && (assi.getType() instanceof ArrayType)
                           && !(type instanceof ArrayType)
                           && (assi.getType().getType() == type.getType())
                         )
                         )
                   )
                {
                {if (true) throw new YAPLException(CompilerError.TypeMismatchAssign, assi, t_sec);}
        }

        /** Code Generation **/

        // Get first attrib from Data Structure
        AttribImpl attrib = (AttribImpl) variablesMap.get(t.image);
        // Make new attrib for Code Generation
        AttribImpl expr = new AttribImpl();
        // Set type for Code Generation
        expr.setType(type);
        // Generate Code for Assignment
        cg.assign(attrib,expr);
  }

/** 'If' Expr 'Then' StatementList [ 'Else' StatementList ] 'EndIf' */
  static final public void IFSTATEMENT() throws ParseException {
        Type type;
    jj_consume_token(IF);
    type = EXPR();
    jj_consume_token(THEN);
        // Expression has to be BOOL for evaluation
                if(type.getType() != Type.BOOL)
                {
                  {if (true) throw new YAPLException(CompilerError.CondNotBool,null,type.getToken());}
                }
    STATEMENTLIST();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      STATEMENTLIST();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

/** 'While' Expr 'Do' StatementList 'EndWhile' */
  static final public void WHILESTATEMENT() throws ParseException {
        Type type;
    jj_consume_token(WHILE);
    type = EXPR();
    jj_consume_token(DO);
                // Expression has to be BOOL for evaluation
                if(type.getType() != Type.BOOL)
                {
                  {if (true) throw new YAPLException(CompilerError.CondNotBool,null,type.getToken());}
                }
    STATEMENTLIST();
    jj_consume_token(ENDWHILE);
  }

/** 'Return' [ Expr ] - > Has to be the same as the procedure defines*/
  static final public void RETURNSTATEMENT() throws ParseException {
  Type type = null;
  Token t;
    t = jj_consume_token(RETURN);
    // minimum one path of the procedure returns (something) 
    set_return = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case TRUE:
    case FALSE:
    case NEW:
    case BLANK:
    case ADDOP:
    case NUMBER:
    case IDENT:
      type = EXPR();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
        // Checks if the programm is currently in an Procedure or the Expr() is used (not null)
    if(currentProcedureSymbol == null && type != null)
    {
      // return without value
      if(type == null)
      {
        {if (true) throw new YAPLException(CompilerError.IllegalRetValMain,currentProcedureSymbol,t);}
      }
          // return without procedure scope
      else
      {
        {if (true) throw new YAPLException(CompilerError.IllegalRetValMain,currentProcedureSymbol,type.getToken());}
      }
    }
    // Current Procedure exists and type is not null but current procedure doesn't need a return statement (void)
    else if(type != null && returnType == null)
    {
      {if (true) throw new YAPLException(CompilerError.IllegalRetValProc,currentProcedureSymbol,type.getToken());}
    }
    // Current Procedure exists but type is null but return Type is needed
    else if(type == null && returnType != null)
    {
      {if (true) throw new YAPLException(CompilerError.InvalidReturnType,currentProcedureSymbol,t);}
    }
    // Current Procedure exists, type exists and return Type is needed - > but different types
    else if(type != null && returnType != null && type.getType() != returnType.getType())
    {
      {if (true) throw new YAPLException(CompilerError.InvalidReturnType,currentProcedureSymbol,type.getToken());}
    }
  }

/** 'Write' string */
  static final public void WRITESTATEMENT() throws ParseException {
 Token t;
    jj_consume_token(WRITE);
    t = jj_consume_token(STRING);
    /** Generate immediate Write Code */
    cg.writeString(t.image);
  }

/** 	IfStatement | WhileStatement | ReturnStatement*		| WriteStatement | Assignment | ProcedureCall | Block*/
  static final public void STATEMENT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IFSTATEMENT();
      break;
    case WHILE:
      WHILESTATEMENT();
      break;
    case RETURN:
      RETURNSTATEMENT();
      break;
    case WRITE:
      WRITESTATEMENT();
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_2(2)) {
        ASSIGNMENT();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          PROCEDURECALL();
          break;
        case BEGIN:
        case DECLARE:
          BLOCK();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/** { Statement ";" } */
  static final public void STATEMENTLIST() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case WRITE:
      case BEGIN:
      case DECLARE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      STATEMENT();
      jj_consume_token(SEMICOLON);
    }
  }

/** [ Decl ] 'Begin' StatementList 'End'  - > For Procedure Scope or Main Scope */
  static final public Token BLOCK() throws ParseException {
        Token t;
    // Open a new Scope
    symTable.openScope(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARE:
      DECL();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    STATEMENTLIST();
    t = jj_consume_token(END);
    // Close current Scope 
    symTable.closeScope();
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/** 'int' | 'bool' - > For var/array declaration or return types*/
  static final public Token PRIMTYPE() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
   {if (true) return t;}
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
   {if (true) return t;}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** PrimType { "[" "]" } - > For var/array declaration, return types or parameters */
  static final public Type TYPE() throws ParseException {
  Token t;
  int dim = 0;
    t = PRIMTYPE();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    // increment dimension (for multidimensional arrays)
    dim++;
    }
    // create ArrayType if dim is greater than 0
    if (dim > 0)
    {
      {if (true) return new ArrayType(false, Type.getTypeOfImage(t.image), t, dim);}
    }
    // otherwise create new Type - > out of string with helperfunction  
    else
    {
      {if (true) return new Type(false, Type.getTypeOfImage(t.image), t);}
    }
    throw new Error("Missing return statement in function");
  }

/** 'void' | Type - > void or Primitive Type or ArrayType*/
  static final public Type RETURNTYPE() throws ParseException {
        Token t = null;
        Type type = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      t = jj_consume_token(VOID);
   // returns new Type with Sort - > OTHER
   {if (true) return new Type(false,Type.OTHER,t);}
      break;
    case INTEGER:
    case BOOLEAN:
      type = TYPE();
        // returns new Type (Primitive or ArrayType)
        {if (true) return type;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** 'Const' ident '=' Literal ';' */
  static final public void CONSTDECL() throws ParseException {
  Token t;
  Token t_sec;
  Type type;
    jj_consume_token(CONST);
    t = jj_consume_token(IDENT);
    jj_consume_token(IS);
    t_sec = LITERAL();
    jj_consume_token(SEMICOLON);
    // Lookup if there is a symbol with the same identifier in this scope
    Symbol constdec = symTable.lookupCurrentScope(t.image);
    // If Symbol exists in this scope - > Error
    if (constdec != null)
    {
      {if (true) throw new YAPLException(CompilerError.SymbolExists, constdec, t);}
    }
    // Create new Symbol
    else
    {
      // if declaration is a BOOL
      if (t_sec.image.equals("True") || t_sec.image.equals("False"))
      {
        type = new Type(true, Type.BOOL, t_sec);
      }
      // declaration is an INT
      else
      {
        type = new Type(true, Type.INT, t_sec);
      }
      // create new symbol with given type
      constdec = new SymbolImpl(Symbol.Constant, t.image);
      constdec.setType(type);
      // is a global variable 
      constdec.setGlobal(true);
      // add it to symbol table
      symTable.addSymbol(constdec);

      /** Code Generation **/
      // create a new attribute with given type
      AttribImpl attrib = new AttribImpl();
      attrib.setType(type);
      // allocate variable 
      cg.allocVariable(constdec);
      // get the offset of the constdeclr
      attrib.setOffset(constdec.getOffset());
      // add it to the global map of variables      
      variablesMap.put(t.image,attrib);
    }
  }

/** Type ident { ',' ident } ';' - > int x,y,z; */
  static final public void VARDECL() throws ParseException {
  Token t;
  Type type;
    type = TYPE();
    t = jj_consume_token(IDENT);
    // Lookup if first variable has been declared in this scope
    Symbol vardecl = symTable.lookupCurrentScope(t.image);
    // Variable already exists in current scope
    if (vardecl != null)
    {
      {if (true) throw new YAPLException(CompilerError.SymbolExists, vardecl, t);}
    }
    // Variable is free - > create it
    else
    {
      // create new Symbol
      vardecl = new SymbolImpl(Symbol.Variable, t.image);
      // add it to symbolTable
      symTable.addSymbol(vardecl);
      // set the actual type      
      vardecl.setType(type);

      /** Code Generation **/
      // create new attribute      
      AttribImpl attrib = new AttribImpl();
      // set the actual type
      attrib.setType(type);
      // allocate Space for the variable
      cg.allocVariable(vardecl);
      // set the offset to attrib
      attrib.setOffset(vardecl.getOffset());
      // add it to the global map of variables          
      variablesMap.put(t.image,attrib);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENT);
      // Lookup if next variable has been declared in this scope
      vardecl = symTable.lookupCurrentScope(t.image);
      // If Symbol exists in this scope - > Error
      if (vardecl != null)
      {
        {if (true) throw new YAPLException(CompilerError.SymbolExists, vardecl, t);}
      }
      // Variable is free - > create it
      else
      {
        // create new Symbol
        vardecl = new SymbolImpl(Symbol.Variable, t.image);
        vardecl.setType(type);
        // add it to symbolTable
        symTable.addSymbol(vardecl);

        /** Code Generation **/
        // create new attribute      
            AttribImpl attrib = new AttribImpl();
            // set the actual type
            attrib.setType(type);
            // allocate Space for the variable   
            cg.allocVariable(vardecl);
            // set the offset to attrib
            attrib.setOffset(vardecl.getOffset());
            // add it to the global map of variables    
            variablesMap.put(t.image,attrib);
      }
    }
    jj_consume_token(SEMICOLON);
  }

/** 'Declare' { ConstDecl | VarDecl } */
  static final public void DECL() throws ParseException {
    jj_consume_token(DECLARE);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case CONST:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        CONSTDECL();
        break;
      case INTEGER:
      case BOOLEAN:
        VARDECL();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** [ 'readonly' ] Type ident - > One Parameter of a Function/Procedure */
  static final public Symbol FORMALPARAM() throws ParseException {
  Token t;
  Type type;
  boolean readOnly = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READONLY:
      jj_consume_token(READONLY);
                   readOnly = true;
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    type = TYPE();
    t = jj_consume_token(IDENT);
    // Lookup if variable has already been declared in this scope - > procedure calc(int x, int x <- ERROR)
    Symbol form = symTable.lookupCurrentScope(t.image);
    // Variable/Parameter exists already - > ERROR
    if (form != null)
    {
      {if (true) throw new YAPLException(CompilerError.SymbolExists, form, t);}
    }
        // Readonly can only applied on ArrayTypes
    else if(!(type instanceof ArrayType) && readOnly)
    {
      {if (true) throw new YAPLException(CompilerError.ReadonlyNotArray, form, t);}
    }
    // Create new Symbol
    else
    {
      type.setReadOnly(readOnly);
      // create new Symbol
      form = new SymbolImpl(Symbol.Parameter, t.image);
      // set the Type
      form.setType(type);
      // add symbol to symbol table
      symTable.addSymbol(form);
      {if (true) return form;}
    }
    throw new Error("Missing return statement in function");
  }

/** FormalParam { ',' FormalParam } - > procedur calc(int x, bool y,...) */
  static final public Symbol FORMALPARAMLIST() throws ParseException {
  Symbol returnSymbol;
  Symbol s1,s2;
    s1 = FORMALPARAM();
    returnSymbol = s1;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      s2 = FORMALPARAM();
          // Link the symbols of the formal parameter to a list! First points on Second, Second on Third...
      s1.setNextSymbol(s2);
      s1 = s2;
    }
    {if (true) return returnSymbol;}
    throw new Error("Missing return statement in function");
  }

/** 'Procedure' ReturnType ident '(' [ FormalParamList ] ')' Block ident ';' */
  static final public void PROCEDURE() throws ParseException {
  Token t;
  Token t_sec;
  Type type;
  Symbol startSymbol = null;
    jj_consume_token(PROCEDURE);
    type = RETURNTYPE();
    t = jj_consume_token(IDENT);
    // Lookup if identifier has already been used in this scope 
    Symbol procedure = symTable.lookupCurrentScope(t.image);
    if (procedure != null)
    {
      {if (true) throw new YAPLException(CompilerError.SymbolExists, procedure, t);}
    }
    // identifier is ready to use
    else
    {
      // create new (Procedure) Symbol 
      procedure = new SymbolImpl(Symbol.Procedure, t.image);
      // set actual (return) type of the symbol
      procedure.setType(type);
      // set the global Variable for later access in 'ReturnStatement'
      currentProcedureSymbol = procedure;

      // if (return) Type is VOID no return is needed 
          if(type.getType() == Type.OTHER)
          {
            need_return = false;
            returnType = null;
          }
          // set the global variables for later 'ReturnStatemen'
          else
          {
            need_return = true;
            returnType = type;
          }
          // set the global variable that no path return (actual) a return value
          set_return = false;

          // add symbol to symbol table	       
      symTable.addSymbol(procedure);
      // open a new scope (the procedure scope)
      symTable.openScope(false);
      // set parent symbol of the actual scope to procedure
      symTable.setParentSymbol(procedure);
    }
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case READONLY:
      startSymbol = FORMALPARAMLIST();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    // procedure has parameters
    if(startSymbol != null)
    {
      // set the next symbol of procedurescope for argumentlist
      procedure.setNextSymbol(startSymbol);
    }
    jj_consume_token(RPAR);
    t_sec = BLOCK();
    t = jj_consume_token(IDENT);
        // gets the nearest parent of kind 'Procedure' - > from top to bottom on Scope stack    
    Symbol procedureClose = symTable.getNearestParentSymbol(Symbol.Procedure);
    // if procedure name is not the same as the identifier at the end - > Error
    if (!procedureClose.getName().equals(t.image))
    {
      {if (true) throw new YAPLException(CompilerError.EndIdentMismatch, procedureClose, t);}
    }
    // if return is needed but not set - > Error
        else if(need_return && !set_return)
    {
      {if (true) throw new YAPLException(CompilerError.MissingReturn,procedure,t_sec);}
    }
    // Procedure was correct    
    else
    {
       // close the procedure scope
       symTable.closeScope();
       // current procedure is null
       currentProcedureSymbol = null;
    }
    jj_consume_token(SEMICOLON);
  }

/** 'Program' ident { Decl | Procedure } 'Begin' StatementList 'End' ident '.' - > First entry in the program */
  static final public void PROGRAM() throws ParseException {
  Token t;
    jj_consume_token(PROGRAM);
    t = jj_consume_token(IDENT);
    // Set the global variable for program name
    program_name = t.image;
    // create new Symbol with the current program name
    Symbol programStart = new SymbolImpl(Symbol.Program, t.image);

    // Open Universe Scope which contains predefined Procedures
    symTable.openScope(true);
    symTable.setParentSymbol(null);

    /** put predefined procedures in symbol table */
    // writeln() - > has no parameter 
    pre_writeln = new SymbolImpl(Symbol.Procedure, "writeln");
    symTable.addSymbol(pre_writeln);

    // writeint(int x) - > with one parameter
    pre_writeint = new SymbolImpl(Symbol.Procedure, "writeint");
        // create predefined argument of type int
        SymbolImpl predefinedArgument = new SymbolImpl(Symbol.Parameter,"");
        // token is null	
        predefinedArgument.setType(new Type(false, Type.INT,null));
        // link the argument to the procedure name
        pre_writeint.setNextSymbol(predefinedArgument);
    // add predefined procedure in symbol table
    symTable.addSymbol(pre_writeint);

    // writebool(bool b) - > with one parameter
    pre_writebool = new SymbolImpl(Symbol.Procedure, "writebool");
    // create predefined argument of type int
    predefinedArgument = new SymbolImpl(Symbol.Parameter,"");
        predefinedArgument.setType(new Type(false, Type.BOOL,null));
        // link the argument to the procedure name
        pre_writebool.setNextSymbol(predefinedArgument);
        // add predefined procedure in symbol table    
    symTable.addSymbol(pre_writebool);

    // readint() - > no parameter
    pre_readint = new SymbolImpl(Symbol.Procedure, "readint");
    // set return type - > INT
    pre_readint.setType(new Type(false, Type.INT,null));
    // add to symbol table
    symTable.addSymbol(pre_readint);

    /** Open Programm Scope */
    symTable.openScope(false);
    symTable.setParentSymbol(programStart);

    /** Generate Code for Programm Start **/
    cg.back.enterMain();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
      case DECLARE:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        DECL();
        break;
      case PROCEDURE:
        PROCEDURE();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(BEGIN);
    STATEMENTLIST();
    jj_consume_token(END);
    t = jj_consume_token(IDENT);
    // check if the first symbol with the same parent symbol has the same name, if not - > Error
    Symbol endProgram = symTable.getNearestParentSymbol(Symbol.Program);
    if (!endProgram.getName().equals(t.image))
    {
        {if (true) throw new YAPLException(CompilerError.EndIdentMismatch, endProgram, t);}
    }
    /** Close Program Scope */
    symTable.closeScope();
    /** Close Universe Scope */
    symTable.closeScope();

    /** Generate Code for Programm End **/
    cg.back.exitMain("main_end");
    jj_consume_token(DOT);
  }

/* Predefined Functions */
/* Root node for productions */
  static final public void Start() throws ParseException {
    PROGRAM();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public StefanMakTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc00000,0x100,0x100,0x100,0xc00040,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x100,0x80000,0xc00040,0x400,0xc00040,0x100,0x40000,0xc00040,0x19008000,0x20000000,0x39008000,0x0,0x0,0x100,0x100000,0x400,0x0,0x0,0x0,0x400,0x0,0x80000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x0,0x0,0x0,0x1000,0x4080,0x400,0x800,0x400,0x100,0x200,0x0,0x0,0x0,0x54c0,0x0,0x54c0,0x0,0x0,0x54c0,0x0,0x4010,0x4010,0x10,0x6,0x0,0x6,0x0,0xe,0xe,0x20,0x0,0x26,0x10,0x10,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public StefanMak(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public StefanMak(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StefanMakTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public StefanMak(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StefanMakTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public StefanMak(StefanMakTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(StefanMakTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
